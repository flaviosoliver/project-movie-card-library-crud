{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","services/Routes.jsx","App.js","serviceWorker.js","index.js"],"names":["Loading","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","placeholder","id","type","className","value","onChange","event","updateMovie","target","htmlFor","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","defaultProps","MovieCard","data-testid","alt","src","to","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovie","movieId","find","mov","parseInt","Promise","resolve","setTimeout","EditMovie","status","shouldRedirect","match","params","movieAPI","then","response","updatedMovie","map","MovieDetails","loading","notFound","filter","MovieList","length","key","NewMovie","submitMovie","newMovie","movieData","nextId","NotFound","Routes","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2dc45c0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div>Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Insira o título\"\n          id=\"movie_title\"\n          type=\"text\"\n          className=\"validate\"\n          value={title}\n          onChange={(event) => this.updateMovie('title', event.target.value)}\n        />\n        <label htmlFor=\"movie_title\">Título</label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Insira o subtítulo\"\n          id=\"movie_subtitle\"\n          type=\"text\"\n          value={subtitle}\n          onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n        />\n        <label htmlFor=\"movie_subtitle\">Subtítulo</label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <input\n          placeholder=\"Insira o caminho da imagem\"\n          id=\"movie_image\"\n          type=\"text\"\n          value={imagePath}\n          onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n        />\n        <label htmlFor=\"movie_image\">Imagem</label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <textarea\n          id=\"movie_storyline\"\n          value={storyline}\n          onChange={(event) => this.updateMovie('storyline', event.target.value)}\n        />\n        <label htmlFor=\"movie_storyline\">Sinopse</label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">Gênero</label>\n        <select\n          id=\"movie_genre\"\n          value={genre}\n          onChange={(event) => this.updateMovie('genre', event.target.value)}\n        >\n          <option value=\"action\">Ação</option>\n          <option value=\"comedy\">Comédia</option>\n          <option value=\"thriller\">Suspense</option>\n          <option value=\"fantasy\">Fantasia</option>\n        </select>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Dê a avaliação do filme\"\n          id=\"movie_rating\"\n          type=\"number\"\n          step={0.1}\n          min={0}\n          max={5}\n          value={rating}\n          onChange={(event) => this.updateMovie('rating', event.target.value)}\n        />\n        <label htmlFor=\"movie_rating\">Avaliação</label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={this.handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.defaultProps = {\n  movie: {\n    id: '',\n    title: '',\n    storyline: '',\n    rating: 0,\n    imagePath: '',\n    genre: '',\n  },\n};\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    rating: PropTypes.number,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    genre: PropTypes.string,\n  }),\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const {\n      movie: {\n        id, title, subtitle, storyline, imagePath, rating,\n      },\n    } = this.props;\n\n    return (\n      <div data-testid=\"movie-card\">\n        <div>\n          <h1>{title}</h1>\n          <h2>{subtitle}</h2>\n          <p>{storyline}</p>\n          <h3>{id}</h3>\n          <p>{rating}</p>\n          <img alt=\"Movie Cover\" src={imagePath} />\n        </div>\n        <Link to={`/movies/${id}`}>VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieCard;\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    imagePath: PropTypes.string,\n    rating: PropTypes.number,\n  }).isRequired,\n};\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n      movie: '',\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    movieAPI.getMovie(id).then((response) => {\n      this.setState({ movie: response, status: 'mounted' });\n    });\n  }\n\n  handleSubmit(updatedMovie) {\n    movieAPI.updateMovie(updatedMovie).then(() => {\n      this.setState({ shouldRedirect: true });\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      // Redirect\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      return <Loading />;\n      // render Loading\n    }\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movie: {},\n      loading: true,\n      notFound: false,\n    };\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    movieAPI\n      .getMovie(id)\n      .then((value) => this.setState({\n        movie: value,\n        loading: false,\n      }));\n  }\n\n  render() {\n    // Change the condition to check the state\n    // if (true) return <Loading />;\n    const { loading, movie } = this.state;\n    const {\n      title, storyline, imagePath, genre, rating, subtitle, id,\n    } = movie;\n\n    if (loading) return <Loading />;\n\n    return (\n      <div data-testid=\"movie-details\">\n        <img alt=\"Movie Cover\" src={`../${imagePath}`} />\n        <p>{`Título: ${title}`}</p>\n        <p>{`Subtítulo: ${subtitle}`}</p>\n        <p>{`Sinopse: ${storyline}`}</p>\n        <p>{`Gênero: ${genre}`}</p>\n        <p>{`Avaliação: ${rating}`}</p>\n        <p><Link to={`/movies/${id}/edit`}>EDITAR</Link></p>\n        <p><Link to=\"/\">VOLTAR</Link></p>\n        <Link\n          to=\"/\"\n          onClick={() => movieAPI.deleteMovie(id)}\n        >\n          DELETAR\n        </Link>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.any,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    movieAPI.getMovies().then((value) => {\n      this.setState({ movies: value });\n    });\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    // Render Loading here if the request is still happening\n    if (movies.length === 0) return <Loading />;\n\n    return (\n      <div data-testid=\"movie-list\">\n        {movies.map((movie) => <MovieCard key={movie.title} movie={movie} />)}\n        <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\n\nimport { Redirect } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      submitMovie: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI\n      .createMovie(newMovie)\n      .then(() => this.setState({ submitMovie: true }));\n  }\n\n  render() {\n    const { submitMovie } = this.state;\n    if (submitMovie) return <Redirect to=\"/\" />;\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { EditMovie, MovieDetails, MovieList, NewMovie, NotFound } from '../pages/index';\n\nexport default class Routes extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={MovieList} />\n        <Route exact path=\"/movies/new\" component={NewMovie} />\n        <Route exact path=\"/movies/:id\" component={MovieDetails} />\n        <Route exact path=\"/movies/:id/edit\" component={EditMovie} />\n        <Route component={NotFound} />\n      </Switch>\n    );\n  }\n}\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport Routes from './services/Routes';\n\nfunction App() {\n  return (\n    <Router>\n      <div>Movie Card Library CRUD</div>\n      <Routes />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}